 A mutable object can be changed after it's created, and an immutable object can't.

In Java, everything (except for strings) is mutable by default: 

public class IntegerPair {
    int x;
    int y;

    IntegerPair(int x, int y) {
        this.x = x;
        this.y = y;
    }
}

IntegerPair p = new IntegerPair(5, 10);
// p.x = 5, p.y = 10

p.x = 50;
// p.x = 50, p.y = 10

There's no way to make existing objects immutable. Even if an object is declared final, its fields can still be changed: 

public class IntegerPair {
    int x;
    int y;

    IntegerPair(int x, int y) {
        this.x = x;
        this.y = y;
    }
}

final IntegerPair p = new IntegerPair(5, 10);
// p.x = 5, p.y = 10

p.x = 50;
// p.x = 50, p.y = 10

That said, if you're defining your own class, you can make its objects immutable by making all fields final and private. 

public class IntegerPair {
    private final int x;
    private final int y;

    IntegerPair(int x, int y) {
        this.x = x;
        this.y = y;
    }
}

IntegerPair p = new IntegerPair(5, 10);

p.x = 50;
// Compilation error: cannot assign a value to a final variable


 Strings can be mutable or immutable depending on the language.

Strings are immutable in Java.

When you modify a string, you're actually creating a separate copy, leaving the first intact:

  String first = "first";

System.out.println(first.hashCode());
// prints something

first = first + "!";

System.out.println(first.hashCode());
// prints something different


Mutable objects are nice because you can make changes in-place, without allocating a new object. But be careful—whenever you make an in-place change to an object, all references to that object will now reflect the change. 


How do we create an immutable class

In order to create an immutable class, you should follow the below steps:

    Make your class final, so that no other classes can extend it.
    Make all your fields final, so that they’re initialized only once inside the constructor and never modified afterwards.
    Don’t expose setter methods.
    When exposing methods which modify the state of the class, you must always return a new instance of the class.
    If the class holds a mutable object:
        Inside the constructor, make sure to use a clone copy of the passed argument and never set your mutable field to the real instance passed through constructor,  this is to prevent the clients who pass the object from modifying it afterwards.
        Make sure to always return a clone copy of the field and never return the real object instance.
        
        
        